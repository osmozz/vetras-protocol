name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-all:
    name: Run All Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: |
          cargo test --workspace --all-features
          cargo test --package vetras-core --all-features
          cargo test --package vetras-validator --all-features

      - name: Run integration tests
        run: |
          cd tests/e2e
          cargo test --all-features
          cd ../performance
          cargo test --all-features

  build-binaries:
    name: Build Release Binaries
    needs: test-all
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build validator
        run: |
          cargo build --release --package vetras-validator --target ${{ matrix.target }}
          cargo build --release --package vetras-cli --target ${{ matrix.target }}

      - name: Package binaries
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf vetras-${{ matrix.target }}.tar.gz vetras-validator vetras-cli
          shasum -a 256 vetras-${{ matrix.target }}.tar.gz > vetras-${{ matrix.target }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vetras-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/vetras-*.tar.gz
            target/${{ matrix.target }}/release/vetras-*.sha256

  build-containers:
    name: Build and Push Containers
    needs: test-all
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build validator image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/validator/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/validator:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/validator:${{ github.ref_name }}

      - name: Build API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/api/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.ref_name }}

  build-sdks:
    name: Build and Package SDKs
    needs: test-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Build Python SDK
        run: |
          cd sdk/python
          python -m pip install --upgrade pip
          pip install build twine
          python -m build
          twine check dist/*

      - name: Build Rust SDK
        run: |
          cd sdk/rust
          cargo package

      - name: Upload SDK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sdks
          path: |
            sdk/python/dist/*
            sdk/rust/target/package/*.crate

  generate-docs:
    name: Generate Documentation
    needs: test-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rust-docs

      - name: Generate Rust docs
        run: |
          cargo doc --no-deps --workspace
          echo "<meta http-equiv=\"refresh\" content=\"0; url=vetras_core\">" > target/doc/index.html

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Generate Python docs
        run: |
          cd sdk/python
          pip install sphinx sphinx-rtd-theme
          cd docs
          make html

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: |
            target/doc
            sdk/python/docs/_build/html

  create-release:
    name: Create GitHub Release
    needs: [build-binaries, build-containers, build-sdks, generate-docs]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate changelog
        id: changelog
        run: |
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.txt
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            # VETRAS ${{ github.ref_name }}

            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}

            ## SHA-256 Checksums
            ```
            $(cat vetras-x86_64-unknown-linux-gnu/vetras-x86_64-unknown-linux-gnu.sha256)
            $(cat vetras-x86_64-apple-darwin/vetras-x86_64-apple-darwin.sha256)
            $(cat vetras-x86_64-pc-windows-msvc/vetras-x86_64-pc-windows-msvc.sha256)
            ```

            ## Docker Images
            - Validator: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/validator:${{ github.ref_name }}`
            - API: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.ref_name }}`
          files: |
            vetras-x86_64-unknown-linux-gnu/vetras-*.tar.gz
            vetras-x86_64-apple-darwin/vetras-*.tar.gz
            vetras-x86_64-pc-windows-msvc/vetras-*.tar.gz
            sdks/*
          draft: false
          prerelease: false

  deploy-docs:
    name: Deploy Documentation
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download documentation artifact
        uses: actions/download-artifact@v3
        with:
          name: documentation

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  notify:
    name: Send Release Notification
    needs: [create-release, deploy-docs]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "New VETRAS Release ${{ github.ref_name }}"
          description: "A new version of VETRAS has been released! Check out the release notes for more information."
          color: 0x28A745
          url: "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
