name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Run cargo audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

  sast-scan:
    name: SAST Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/rust
            p/typescript
          generateSarif: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run OSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          publish_results: true

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  blockchain-specific:
    name: Blockchain Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Solidity Tools
        run: |
          npm install -g slither-analyzer
          npm install -g myth-cli

      - name: Run Smart Contract Analysis
        run: |
          cd programs/vetras-core
          cargo build
          slither . || true
          myth analyze . || true

      - name: Check for Common Blockchain Vulnerabilities
        run: |
          python3 -m pip install eth-security-toolbox
          cd programs/vetras-core
          python3 scripts/security_check.py || true

  ai-security:
    name: AI Model Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install AI Security Tools
        run: |
          pip install ai-security-scanner
          pip install model-validator
          pip install tensorflow-privacy

      - name: Run AI Model Security Checks
        run: |
          cd validator/src/ai
          python3 -m ai_security_scanner . --check-model-poisoning
          python3 -m model_validator . --check-adversarial
          python3 -m tf_privacy_check . --check-data-leakage

  notification:
    name: Security Notification
    needs: [security-audit, sast-scan, secret-scan, supply-chain, blockchain-specific, ai-security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Security Report
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            let report = "# Security Scan Summary\n\n";
            for (const [job, status] of Object.entries(jobs)) {
              report += `- ${job}: ${status.result}\n`;
            }
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.name,
              title: `Security Scan Report - ${new Date().toISOString()}`,
              body: report,
              labels: ['security', 'automated-report']
            })
